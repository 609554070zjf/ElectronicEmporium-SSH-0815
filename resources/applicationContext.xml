<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"    
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:context="http://www.springframework.org/schema/context"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:tx="http://www.springframework.org/schema/tx"    
     xsi:schemaLocation="
     http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context.xsd
     http://www.springframework.org/schema/aop
     http://www.springframework.org/schema/aop/spring-aop.xsd
     http://www.springframework.org/schema/tx 
     http://www.springframework.org/schema/tx/spring-tx.xsd">    
    
    <!-- 引入属性文件 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    
    <bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
    	 <!-- 数据库连接相关信息 -->
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        
        <!-- 连接池中保留的最小连接数。 -->  
        <property name="minPoolSize" value="50" />
        <!-- 连接池中保留的最大连接数。 -->
        <property name="maxPoolSize" value="100" />  
        <!-- 最大空闲时间,超过该时间则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime" value="1800" />  
        <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。 -->
        <property name="acquireIncrement" value="3" />  
        <!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。 -->
        <property name="maxStatements" value="100" />  
        <!-- 初始化时获取10个连接，取值应在minPoolSize与maxPoolSize之间。 -->
        <property name="initialPoolSize" value="10" />  
        <!-- 每隔多少秒检查所有连接池中的空闲连接。 -->
        <property name="idleConnectionTestPeriod" value="60" />  
        <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 --> 
        <property name="acquireRetryAttempts" value="30" />  
        <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。Default: false--> 
        <property name="breakAfterAcquireFailure" value="true" />  
        <!-- 因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。Default: false -->
        <property name="testConnectionOnCheckout" value="false" />  
    </bean>
     
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
    </bean>
   	
    <!-- <context:component-scan base-package="edu.fjnu.cse"></context:component-scan> -->
    
    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <!-- 注入SessionFactory -->
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
     
    <!-- 配置事务增强 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 配置需要进行事务管理的方法，和事务传播行为 -->
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
     
    <!-- 配置切面 -->
    <aop:config>
        <!-- 配置切入点
            * org.ssh.service.*+.*(..)
                *：表示方法的作用域，*表示所有
                org.ssh.service.*：表示org.ssh.service下的任何包
                org.ssh.service.*+：表示org.ssh.service下的任何包及其子包
                *(..)：*表示任何方法，(..)表示方法的任何参数
         -->
        <aop:pointcut id="pointcut" expression="execution(* edu.fjnu.cse.service.*+.*(..))"/>
        <!-- 适配切入点和事务增强 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
    </aop:config>
	
	<bean id="user" class="edu.fjnu.cse.domain.User"></bean>
	<bean id="goodsType" class="edu.fjnu.cse.domain.GoodsType"></bean>
	<bean id="goods" class="edu.fjnu.cse.domain.Goods"></bean>
	<bean id="buyCar" class="edu.fjnu.cse.domain.BuyCar"></bean>
	<bean id="order" class="edu.fjnu.cse.domain.Order"></bean>
	
	<!-- 商品类别 GoodsType -->
	<bean id="goodsTypeDao" class="edu.fjnu.cse.dao.impl.GoodsTypeDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<bean id="goodsTypeService" class="edu.fjnu.cse.service.impl.GoodsTypeServiceImpl">
		<property name="goodsTypeDao" ref="goodsTypeDao"></property>
	</bean>
	
	<bean id="goodsTypeAction" class="edu.fjnu.cse.action.GoodsTypeAction" scope="prototype">
		<property name="goodsTypeService" ref="goodsTypeService"></property>
	</bean>
	
	<!-- 商品 Goods -->
	<bean id="goodsDao" class="edu.fjnu.cse.dao.impl.GoodsDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<bean id="goodsService" class="edu.fjnu.cse.service.impl.GoodsServiceImpl">
		<property name="goodsDao" ref="goodsDao"></property>
	</bean>
	
	<bean id="goodsAction" class="edu.fjnu.cse.action.GoodsAction" scope="prototype">
		<property name="goodsService" ref="goodsService"></property>
		<property name="goodsTypeService" ref="goodsTypeService"></property>
		<property name="userService" ref="userService"></property>
	</bean>
	
	<!-- 管理员User -->
	<bean id="userDao" class="edu.fjnu.cse.dao.impl.UserDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<bean id="userService" class="edu.fjnu.cse.service.impl.UserServiceImpl">
		<property name="userDao" ref="userDao"></property>
	</bean>
	
	<bean id="userAction" class="edu.fjnu.cse.action.UserAction" scope="prototype">
		<property name="userService" ref="userService"></property>
	</bean>
	
	<!-- 订单 -->
	<bean id="orderAction" class="edu.fjnu.cse.action.OrderAction" scope="prototype">
		<property name="orderService" ref="orderService"></property>
	</bean>
	<bean id="orderDao" class="edu.fjnu.cse.dao.impl.OrderDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<bean id="orderService" class="edu.fjnu.cse.service.impl.OrderServiceImpl">
		<property name="orderDao" ref="orderDao"></property>
	</bean>
	
</beans>  